shiny::runApp()
runApp()
runApp()
runApp()
tm_shape(world_JO) +
tm_polygons(key, palette = "Reds", title = key) +
tm_shape(map_best) +
tm_text("sovereignt", just="center") +
tm_layout(#title = "Medals and 3 best countries", #utile pour le mode 'plot' et non 'view'
title.size = 2.0,
title.position = c("center", "top"),
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
bg.color = "#BDD1EE"
)
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/franc/Desktop/R_Data_Visualization/PROJET")
#install.packages("ggplot2")
library(ggplot2)
final <- merge(final, ville, by.x="Host_City", by.y="Host_City")
#install.packages("gapminder")
library(gapminder)
#install.packages("plyr")
library(plyr)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("dplyr")
library(dplyr)
#install.packages("questionr")
library(questionr)
#install.packages("shiny")
library(shiny)
#install.packages("gapminder")
library(gapminder)
#install.packages("tmap")
library(tmap)
#install.packages("rnaturalearth")
library(rnaturalearth)
#install.packages("rnaturalearthdata")
library(rnaturalearthdata)
#install.packages("sf")
library(sf)
#install.packages("rgeos")
library(rgeos)
bdd_JO = read.csv(file = 'bdd_JO_120_years.csv')# informations sur les sportifs
noc = read.csv(file = 'noc_regions.csv')# associe un NOC a un Pays
ville = read.csv(file = 'Ville_noc.csv')# associe chaque ville de JO a un NOC
final <- merge(bdd_JO, noc, by.x="NOC", by.y="NOC")
# Creation de la base finale
final <- merge(final, ville, by.x="Host_City", by.y="Host_City")
final <- cbind(final,Home = final[,c("NOC")]==final[,c("NOC_City")]) # ajouter la colone Home (sportif a domicile) qui est un booleen
final <- subset(final, select=-c(Team,notes,Games))
final <- final[,c("ID","Name", "Sex", "Age", "Height", "Weight", "NOC", "region", "Host_City","NOC_City","Year","Season","Sport","Event","Medal","Home")] #on reorganise notre dataframe
colnames(final)[8] <- "Region" #marche
final$Region[final$Region %in% "Boliva"] <- "Bolivia" #on change le nom de la Bolivie
rm(noc)
rm(ville)
rm(bdd_JO) #on supprime les bdd de base
df_subset <- function(col, key, bdd=final) {
subset(bdd, subset = bdd[col] == key)
}
df_rank_medal <- function(bdd){
bdd_score <- group_by(bdd, Region) %>% summarize(Gold = sum(Medal == "Gold", na.rm=TRUE),
Silver = sum(Medal == "Silver", na.rm=TRUE),
Bronze = sum(Medal == "Bronze", na.rm=TRUE),
Score = log(sum(Gold*100+Silver*10+Bronze*1),exp(1)))
bdd_score$Score <- bdd_score$Score/max(bdd_score$Score)
bdd_score$Score[bdd_score$Score == -Inf] <- 0
return(bdd_score)
}
## function that return the score by Names (number of medals)
df_name_medal <- function(bdd){
bdd_score <- group_by(bdd, Name) %>% summarize(Gold = sum(Medal == "Gold", na.rm=TRUE),
Silver = sum(Medal == "Silver", na.rm=TRUE),
Bronze = sum(Medal == "Bronze", na.rm=TRUE),
Score = log(sum(Gold*100+Silver*10+Bronze*1),exp(1)))
bdd_score$Score <- bdd_score$Score/max(bdd_score$Score)
bdd_score$Score[bdd_score$Score == -Inf] <- 0
return(bdd_score)
}
## function returning the 3 bests (country or athlete that have the best score)
df_best3 <- function(bdd){
best <- df_rank_medal(bdd)
best <- best[order(best$Score,decreasing = TRUE),]
best <- best[1:3,]
return(best)
}
## importing the dataset of the entire world
world <- ne_countries(scale = "medium", returnclass = "sf")
## Change sovereignt names as they are the same as in our Olympic Games dataframe
world$sovereignt[world$sovereignt %in% "United States of America"] <- "USA"
world$sovereignt[world$sovereignt %in% "United Kingdom"] <- "UK"
world$sovereignt[world$sovereignt %in% "Trinidad and Tobago"] <- "Trinidad"
world$sovereignt[world$sovereignt %in% "United Republic of Tanzania"] <- "Tanzania"
world$sovereignt[world$sovereignt %in% "Saint Vincent and the Grenadines"] <- "Saint Vincent"
world$sovereignt[world$sovereignt %in% "Saint Kitts and Nevis"] <- "Saint Kitts"
world$sovereignt[world$sovereignt %in% "The Bahamas"] <- "Bahamas"
world$sovereignt[world$sovereignt %in% "Antigua and Barbuda"] <- "Antigua"
world <-  subset(world, sovereignt != "Antarctica") #without Antarctica which is useless
## map function returning the map of a dataset
map_f <- function(bdd, key){
world_JO <- merge(world, bdd, by.x="sovereignt", by.y="Region", all = TRUE) #merge 2 df
best_score <- df_best3(bdd)
map_best <- subset(world_JO, admin %in% best_score$Region) #subset of the 3 bests
tmap_mode("plot")
#tmap_mode("view") #leaflet = widget html
tm_shape(world_JO) +
tm_polygons(key, palette = "Reds", title = key) +
tm_shape(map_best) +
tm_text("sovereignt", just="center") +
tm_layout(#title = "Medals and 3 best countries", #utile pour le mode 'plot' et non 'view'
title.size = 2.0,
title.position = c("center", "top"),
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
bg.color = "#BDD1EE"
)
}
## importing the dataset of the entire world
world <- ne_countries(scale = "medium", returnclass = "sf")
## Change sovereignt names as they are the same as in our Olympic Games dataframe
world$sovereignt[world$sovereignt %in% "United States of America"] <- "USA"
world$sovereignt[world$sovereignt %in% "United Kingdom"] <- "UK"
world$sovereignt[world$sovereignt %in% "Trinidad and Tobago"] <- "Trinidad"
world$sovereignt[world$sovereignt %in% "United Republic of Tanzania"] <- "Tanzania"
world$sovereignt[world$sovereignt %in% "Saint Vincent and the Grenadines"] <- "Saint Vincent"
world$sovereignt[world$sovereignt %in% "Saint Kitts and Nevis"] <- "Saint Kitts"
world$sovereignt[world$sovereignt %in% "The Bahamas"] <- "Bahamas"
world$sovereignt[world$sovereignt %in% "Antigua and Barbuda"] <- "Antigua"
world <-  subset(world, sovereignt != "Antarctica") #without Antarctica which is useless
## map function returning the map of a dataset
map_f <- function(bdd, key){
world_JO <- merge(world, bdd, by.x="sovereignt", by.y="Region", all = TRUE) #merge 2 df
best_score <- df_best3(bdd)
map_best <- subset(world_JO, admin %in% best_score$Region) #subset of the 3 bests
tmap_mode("plot")
#tmap_mode("view") #leaflet = widget html
tm_shape(world_JO) +
tm_polygons(key, palette = "Reds", title = key) +
tm_shape(map_best) +
tm_text("sovereignt", just="center") +
tm_layout(#title = "Medals and 3 best countries", #utile pour le mode 'plot' et non 'view'
title.size = 2.0,
title.position = c("center", "top"),
legend.position = c("left", "bottom"),
legend.title.size = 0.8,*
## importing the dataset of the entire world
world <- ne_countries(scale = "medium", returnclass = "sf")
## Change sovereignt names as they are the same as in our Olympic Games dataframe
world$sovereignt[world$sovereignt %in% "United States of America"] <- "USA"
world$sovereignt[world$sovereignt %in% "United Kingdom"] <- "UK"
world$sovereignt[world$sovereignt %in% "Trinidad and Tobago"] <- "Trinidad"
world$sovereignt[world$sovereignt %in% "United Republic of Tanzania"] <- "Tanzania"
world$sovereignt[world$sovereignt %in% "Saint Vincent and the Grenadines"] <- "Saint Vincent"
world$sovereignt[world$sovereignt %in% "Saint Kitts and Nevis"] <- "Saint Kitts"
world$sovereignt[world$sovereignt %in% "The Bahamas"] <- "Bahamas"
world$sovereignt[world$sovereignt %in% "Antigua and Barbuda"] <- "Antigua"
world <-  subset(world, sovereignt != "Antarctica") #without Antarctica which is useless
## map function returning the map of a dataset
map_f <- function(bdd, key){
world_JO <- merge(world, bdd, by.x="sovereignt", by.y="Region", all = TRUE) #merge 2 df
best_score <- df_best3(bdd)
map_best <- subset(world_JO, admin %in% best_score$Region) #subset of the 3 bests
tmap_mode("plot")
#tmap_mode("view") #leaflet = widget html
tm_shape(world_JO) +
tm_polygons(key, palette = "Reds", title = key) +
tm_shape(map_best) +
tm_text("sovereignt", just="center") +
tm_layout(#title = "Medals and 3 best countries", #utile pour le mode 'plot' et non 'view'
title.size = 2.0,
title.position = c("center", "top"),
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
bg.color = "#BDD1EE"
)
}
map_f(df_subset("Sport", "Basketball"),"Score")
map_f(df_subset("Sport", "Basketball"),"Score")
bask <- df_subset("Sport", "Basketball")
df_best3(df_rank_medal(df_subset("Sport", "Judo")))
View(final)
bask <- df_subset("Sport", "Basketball")
View(bask)
df_rank_medal(basket)
df_rank_medal(bask)
bask_3 <- df_rank_medal(bask)
View(bask_3)
rm(bask_3)
bask_country <- df_rank_medal(bask)
View(bask_country)
bask_3 <- df_best3(bask_country)
bask_3 <- df_best3(bask)
View(bask_3)
world_JO_t <- merge(world, bask, by.x="sovereignt", by.y="Region", all = TRUE)
View(world_JO_t)
View(bask_country)
bask_names <- df_name_medal(bask)
View(bask_names)
subset(df_best3(df_name_medal(df_subset("Sport"",basketball"))),select = -c(Score))
subset(df_best3(df_name_medal(df_subset("Sport","basketball"))),select = -c(Score))
subset(df_best3(df_name_medal(df_subset("Sport","Basketball"))),select = -c(Score))
subset(df_best3(df_name_medal(bask)),select = -c(Score))
df_best4 <- function(bdd){
best <- bdd[order(bdd$Score,decreasing = TRUE),]
best <- best[1:3,]
return(best)
}
#attention la bdd doit deja avoit été triée par score
df_best4 <- function(bdd_score){
best <- bdd_score[order(bdd_score$Score,decreasing = TRUE),]
best <- best[1:3,]
return(best)
}
#attention la bdd doit deja avoit été triée par score
df_best4 <- function(bdd_score){
best <- bdd_score[order(bdd_score$Score,decreasing = TRUE),]
best <- best[1:3,]
return(best)
}
## importing the dataset of the entire world
world <- ne_countries(scale = "medium", returnclass = "sf")
## Change sovereignt names as they are the same as in our Olympic Games dataframe
world$sovereignt[world$sovereignt %in% "United States of America"] <- "USA"
world$sovereignt[world$sovereignt %in% "United Kingdom"] <- "UK"
world$sovereignt[world$sovereignt %in% "Trinidad and Tobago"] <- "Trinidad"
world$sovereignt[world$sovereignt %in% "United Republic of Tanzania"] <- "Tanzania"
world$sovereignt[world$sovereignt %in% "Saint Vincent and the Grenadines"] <- "Saint Vincent"
world$sovereignt[world$sovereignt %in% "Saint Kitts and Nevis"] <- "Saint Kitts"
world$sovereignt[world$sovereignt %in% "The Bahamas"] <- "Bahamas"
world$sovereignt[world$sovereignt %in% "Antigua and Barbuda"] <- "Antigua"
world <-  subset(world, sovereignt != "Antarctica") #without Antarctica which is useless
## map function returning the map of a dataset
map_f <- function(bdd, key){
world_JO <- merge(world, bdd, by.x="sovereignt", by.y="Region", all = TRUE) #merge 2 df
bdd_score <-  df_rank_medal(bdd)
best_score <- df_best3(bdd_score)
map_best <- subset(world_JO, admin %in% best_score$Region) #subset of the 3 bests
tmap_mode("plot")
#tmap_mode("view") #leaflet = widget html
tm_shape(world_JO) +
tm_polygons(key, palette = "Reds", title = key) +
tm_shape(map_best) +
tm_text("sovereignt", just="center") +
tm_layout(#title = "Medals and 3 best countries", #utile pour le mode 'plot' et non 'view'
title.size = 2.0,
title.position = c("center", "top"),
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
bg.color = "#BDD1EE"
)
}
map_f(df_subset("Sport", "Basketball"),"Score")
rm(bask_coutry)
rm(bask_country)
rm(bask_3)
rm(bask_names)
rm(world_JO_t)
## importing the dataset of the entire world
world <- ne_countries(scale = "medium", returnclass = "sf")
## Change sovereignt names as they are the same as in our Olympic Games dataframe
world$sovereignt[world$sovereignt %in% "United States of America"] <- "USA"
world$sovereignt[world$sovereignt %in% "United Kingdom"] <- "UK"
world$sovereignt[world$sovereignt %in% "Trinidad and Tobago"] <- "Trinidad"
world$sovereignt[world$sovereignt %in% "United Republic of Tanzania"] <- "Tanzania"
world$sovereignt[world$sovereignt %in% "Saint Vincent and the Grenadines"] <- "Saint Vincent"
world$sovereignt[world$sovereignt %in% "Saint Kitts and Nevis"] <- "Saint Kitts"
world$sovereignt[world$sovereignt %in% "The Bahamas"] <- "Bahamas"
world$sovereignt[world$sovereignt %in% "Antigua and Barbuda"] <- "Antigua"
world <-  subset(world, sovereignt != "Antarctica") #without Antarctica which is useless
## map function returning the map of a dataset
map_f <- function(bdd, key){
world_JO <- merge(world, bdd, by.x="sovereignt", by.y="Region", all = TRUE) #merge 2 df
bdd_score <-  df_rank_medal(bdd)
best_score <- df_best3(bdd_score)
map_best <- subset(world_JO, admin %in% best_score$Region) #subset of the 3 bests
tmap_mode("plot")
#tmap_mode("view") #leaflet = widget html
tm_shape(world_JO) +
tm_polygons(key, palette = "Reds", title = key) +
tm_shape(map_best) +
tm_text("sovereignt", just="center") +
tm_layout(#title = "Medals and 3 best countries", #utile pour le mode 'plot' et non 'view'
title.size = 2.0,
title.position = c("center", "top"),
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
bg.color = "#BDD1EE"
)
}
map_f(df_subset("Sport", "Basketball"),"Score")
## importing the dataset of the entire world
world <- ne_countries(scale = "medium", returnclass = "sf")
## Change sovereignt names as they are the same as in our Olympic Games dataframe
world$sovereignt[world$sovereignt %in% "United States of America"] <- "USA"
world$sovereignt[world$sovereignt %in% "United Kingdom"] <- "UK"
world$sovereignt[world$sovereignt %in% "Trinidad and Tobago"] <- "Trinidad"
world$sovereignt[world$sovereignt %in% "United Republic of Tanzania"] <- "Tanzania"
world$sovereignt[world$sovereignt %in% "Saint Vincent and the Grenadines"] <- "Saint Vincent"
world$sovereignt[world$sovereignt %in% "Saint Kitts and Nevis"] <- "Saint Kitts"
world$sovereignt[world$sovereignt %in% "The Bahamas"] <- "Bahamas"
world$sovereignt[world$sovereignt %in% "Antigua and Barbuda"] <- "Antigua"
world <-  subset(world, sovereignt != "Antarctica") #without Antarctica which is useless
## map function returning the map of a dataset
map_f <- function(bdd, key){
world_JO <- merge(world, bdd, by.x="sovereignt", by.y="Region", all = TRUE) #merge 2 df
bdd_score <-  df_rank_medal(bdd)
best_score <- df_best4(bdd_score)
map_best <- subset(world_JO, admin %in% best_score$Region) #subset of the 3 bests
tmap_mode("plot")
#tmap_mode("view") #leaflet = widget html
tm_shape(world_JO) +
tm_polygons(key, palette = "Reds", title = key) +
tm_shape(map_best) +
tm_text("sovereignt", just="center") +
tm_layout(#title = "Medals and 3 best countries", #utile pour le mode 'plot' et non 'view'
title.size = 2.0,
title.position = c("center", "top"),
legend.position = c("left", "bottom"),
legend.title.size = 0.8,
bg.color = "#BDD1EE"
)
}
map_f(df_subset("Sport", "Basketball"),"Score")
rm(list=ls())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q
h1("The score is calculated in relation to medals won by countries."),
h1("A gold medal is worth 10 times more than a silver medal and a silver medal is worth 10 times more than a bronze medal"),
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
install.packages('rsconnect')
rsconnect::setAccountInfo(name='rdashboardesiee',
token='02F01A2AEDC72F229C6C430824B3785B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='rdashboardesiee',
token='02F01A2AEDC72F229C6C430824B3785B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='rdashboardesiee',token='02F01A2AEDC72F229C6C430824B3785B',secret='<SECRET>')
rsconnect::setAccountInfo(name='rdashboardesiee',token='02F01A2AEDC72F229C6C430824B3785B',secret='Fc7yRqYcolh+AtDQoZdkdOYZ0aAny+TRZ4jlgP69')
library(rsconnect)
rsconnect::deployApp('C:/Users/franc/Desktop/R_Data_Visualization/PROJET/deploy_essai')
rsconnect::deployApp('C:/Users/franc/Desktop/R_Data_Visualization/PROJET/deploy_essai/App-1')
library(shiny)
library(plyr)
library(ggplot2)
library(dplyr)
library(questionr)
library(shinythemes)
library(gapminder)
library(tmap)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(rgeos)
library(DT)
library(shiny)
library(plyr)
library(ggrepel) #piechart labels
library(forcats) #fct inorder
library(scales)
source("global.R")
install.package(""rnaturalearth"")
install.package(""rnaturalearth")
install.package(rnaturalearth")
q
c
c
d
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(final)
View(final)
runApp()
